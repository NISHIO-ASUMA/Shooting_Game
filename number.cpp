//====================================
//
// 数字処理 [ number.cpp ]
// Author: Asuma Nishio
//
//=====================================

//**********************
// インクルードファイル
//**********************
#include "number.h"
#include "manager.h"
#include "template.h"

//=================================
// コンストラクタ
//=================================
CNumber::CNumber()
{
	// 値のクリア
	m_pos = VECTOR3_NULL;
	m_fHeight = NULL;
	m_fWidth = NULL;
	m_TexU = NULL;
	m_TexU1 = NULL;
	m_TexV = NULL;
	m_pVtxBuff = nullptr;
	m_col = COLOR_WHITE;
	n_nColorCount = NULL;
}
//=================================
// デストラクタ
//=================================
CNumber::~CNumber()
{
	// 無し
}
//=================================
// 初期化処理
//=================================
HRESULT CNumber::Init(D3DXVECTOR3 pos,float fwidth,float fheight)
{
	// 初期値代入
	m_pos = pos;

	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// 頂点バッファの作成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);

	// 頂点情報のポインタ
	VERTEX_2D* pVtx;	

	// 頂点バッファをロックし,頂点情報へのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(pos.x - fwidth, pos.y - fheight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(pos.x + fwidth, pos.y - fheight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(pos.x - fwidth, pos.y + fheight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(pos.x + fwidth, pos.y + fheight, 0.0f);

	// rhwの設定(1.0fで固定)
	pVtx[0].rhw = 
	pVtx[1].rhw = 
	pVtx[2].rhw = 
	pVtx[3].rhw = 1.0f;

	// 頂点カラーの設定
	pVtx[0].col =
	pVtx[1].col =
	pVtx[2].col =
	pVtx[3].col = m_col;

	//テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(DIGIT_VALUE, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(DIGIT_VALUE, 1.0f);

	//頂点バッファをアンロック
	m_pVtxBuff->Unlock();

	return S_OK;
}
//=================================
// 終了処理
//=================================
void CNumber::Uninit(void)
{
	// 頂点バッファの破棄
	if (m_pVtxBuff != nullptr)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = nullptr;
	}
}
//=================================
// 更新処理
//=================================
void CNumber::Update(void)
{
	// 無し
}
//=================================
// 描画処理
//=================================
void CNumber::Draw(void)
{
	// デバイス取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// 頂点バッファをデータストリームに設定
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	// ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);

	// テクスチャ戻す
	pDevice->SetTexture(0, NULL);
}
//==================================
// サイズ処理
//==================================
void CNumber::SetSize(float fWidth, float fHeight)
{
	m_fWidth = fWidth;
	m_fHeight = fHeight;

	// 頂点情報のポインタ
	VERTEX_2D* pVtx;

	// 頂点バッファをロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 座標更新
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - fWidth, m_pos.y - fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + fWidth, m_pos.y - fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - fWidth, m_pos.y + fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + fWidth, m_pos.y + fHeight, 0.0f);

	// 頂点バッファのアンロック
	m_pVtxBuff->Unlock();
}
//===================================
// カラー設定
//===================================
void CNumber::SetCol(D3DXCOLOR col)
{
	// 代入
	m_col = col;

	// 頂点情報のポインタ
	VERTEX_2D* pVtx;

	// 頂点バッファをロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// カラー
	pVtx[0].col =
	pVtx[1].col =
	pVtx[2].col =
	pVtx[3].col = m_col;

	// 頂点バッファのアンロック
	m_pVtxBuff->Unlock();
}
//==================================
// 点滅処理
//==================================
void CNumber::SetFlash(const int nStartFrame, const int nEndFrame, D3DXCOLOR col)
{
	// 頂点情報のポインタ
	VERTEX_2D* pVtx = NULL;

	// 頂点バッファをロックする
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// カラーカウントを加算
	n_nColorCount++;

	// 点滅する周期を計算する
	int nCycle = nEndFrame - nStartFrame;
	if (nCycle <= 0) nCycle = 1;

	// 進行度を設定
	float fProgress = static_cast<float>((n_nColorCount - nStartFrame) % nCycle) / static_cast<float>(nCycle);

	// 透明度を格納する
	float alpha = NULL;

	if (fProgress < 0.5f)
	{
		// 線形補間
		alpha = Lerp(0.5f, 1.0f, fProgress * 2.0f);
	}
	else
	{
		// 線形補間
		alpha = Lerp(1.0f, 0.5f, (fProgress - 0.5f) * 2.0f);
	}

	// カラー設定
	D3DXCOLOR ChangeCol(col.r, col.g, col.b, alpha);

	// 現在カラーに適用
	SetCol(ChangeCol);

	// 頂点バッファをアンロック
	m_pVtxBuff->Unlock();
}
//==================================
// 桁数計算処理
//==================================
void CNumber::SetDigit(int nDigit)
{
	// 頂点情報のポインタ
	VERTEX_2D* pVtx;

	// 頂点バッファのロック
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// テクスチャ座標の計算
	float TexU = nDigit * DIGIT_VALUE;

	// テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(TexU, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(TexU + DIGIT_VALUE, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(TexU, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(TexU + DIGIT_VALUE, 1.0f);

	// 頂点バッファのアンロック
	m_pVtxBuff->Unlock();
}
